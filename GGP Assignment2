GGP的第一次实操作业

大概2年多没有碰C++了，但是这学期的课的Graphics是一定会用到C++的，发现忘得一干二净了……最可怕的是指针这种东西( ･᷄ὢ･᷅ )
这次踩的无数坑都和指针有关。突然觉得C#真是简单好多……
但是，为了梦想！要努力写C++，所以在github上创建这个做一些总结避免自己踩到同样的坑

作业的思路就是在老师写的Startercode的基础上，自己建一个Mesh类，然后在Game.h里建立3个Mesh Object,最后用Game.cpp里的函数将这3个Mesh显示出来。老师
的要求写的详细，需要创建什么样的构造函数，还有需要哪些变量，怎么使用Game里的这些函数都写好了。
思路就是，根据要求，先写出一个Mesh类，然后构造函数里有5个参数，在game里传给这个Mesh 关于这个Mesh的Vertices, indices, verticesNum, indicesNum, device。

然后出现了坑，当然也是因为我菜
1.类的实现一定不要写在.h里！！！会报错！会有冲突……大概是本科的时候学的太浅了，毕竟是工科嘛……
2.内存管理：被坑死了
1）最好不要出现 两个指针指向同一个内存空间
如果出现了，一定要注意是由哪个创建的（谁用的new）
new出来的指针是手动开辟的内存空间，系统并不会帮你释放
2）memory leaks:指针指向的内存被释放了而指针还在，这种情况也叫内存泄漏
                             手动开辟的内存不被释放，也叫内存泄漏

在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。 内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。 内存泄漏通常情况下只能由获得程序源代码的程序员才能分析出來。

3) delete或者free 是指切段这个指针和这个内存的联系（由类决定，如果有析构函数的情况下还会调用析构函数），并不会改变内存里村的东西的值
